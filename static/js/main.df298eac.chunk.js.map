{"version":3,"sources":["components/List/List.module.css","components/Card/Card.module.css","components/Search-box/Search.module.css","components/Card/Card.jsx","components/List/List.js","components/Search-box/Search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","card","props","duration","easing","className","classes","Card","monster","name","src","id","alt","email","list","List","monsters","map","key","searchBox","Search","type","placeholder","onChange","change","App","filterMonstersHandler","e","setState","inputValue","target","value","state","fetch","then","res","json","users","this","filtredCards","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,iBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,+NCkBZC,EAfF,SAACC,GACZ,OACE,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC9B,yBAAKC,UAAWC,IAAQC,MACtB,4BAAKL,EAAMM,QAAQC,MACnB,yBACEC,IAAG,+BAA0BR,EAAMM,QAAQG,GAAxC,aACHC,IAAKV,EAAMM,QAAQC,OAErB,2BAAIP,EAAMM,QAAQK,UCCXC,EAVF,SAACZ,GACZ,OACE,yBAAKG,UAAWC,IAAQS,MACrBb,EAAMc,SAASC,KAAI,SAACT,GAAD,OAClB,kBAACD,EAAD,CAAMW,IAAKV,EAAQG,GAAIH,QAASA,S,gBCSzBW,EAdG,SAACjB,GACjB,OACE,oCACE,0BAAMG,UAAWC,IAAQc,QACvB,2BACEC,KAAK,SACLC,YAAY,kBACZC,SAAUrB,EAAMsB,YC6BXC,G,wDAjCb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAORwB,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACXhB,SAAU,GACVa,WAAY,IAJG,E,gEAYE,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEZ,SAAUqB,S,+BAGrC,IAAD,EAC0BC,KAAKN,MAA9BhB,EADD,EACCA,SAAUa,EADX,EACWA,WACZU,EAAevB,EAASwB,QAAO,SAACvC,GAAD,OACnCA,EAAKQ,KAAKgC,cAAcC,SAASb,EAAWY,kBAE9C,OACE,yBAAKpC,UAAU,OACb,8CACA,kBAAC,EAAD,CAAWmB,OAAQc,KAAKZ,wBACxB,kBAACX,EAAD,CAAMC,SAAUuB,S,GA5BNI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df298eac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__Rb6_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__2v91Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"Search_Search__3n9nK\"};","import React from \"react\";\nimport FlipMove from \"react-flip-move\";\nimport classes from \"./Card.module.css\";\n\nconst card = (props) => {\n  return (\n    <FlipMove duration={300} easing=\"ease-in-out\">\n      <div className={classes.Card}>\n        <h3>{props.monster.name}</h3>\n        <img\n          src={`https://robohash.org/${props.monster.id}?set=set1`}\n          alt={props.monster.name}\n        />\n        <p>{props.monster.email}</p>\n      </div>\n    </FlipMove>\n  );\n};\n\nexport default card;\n","import React from \"react\";\nimport classes from \"./List.module.css\";\nimport Card from \"../Card/Card\";\n\nconst list = (props) => {\n  return (\n    <div className={classes.List}>\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default list;\n","import React from \"react\";\nimport classes from \"./Search.module.css\";\n\nconst searchBox = (props) => {\n  return (\n    <>\n      <form className={classes.Search}>\n        <input\n          type=\"search\"\n          placeholder=\"Search Monsters\"\n          onChange={props.change}\n        />\n      </form>\n    </>\n  );\n};\n\nexport default searchBox;\n","import React, { Component } from \"react\";\nimport List from \"./components/List/List\";\nimport SearchBox from \"./components/Search-box/Search-box\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      inputValue: \"\",\n    };\n  }\n\n  filterMonstersHandler = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, inputValue } = this.state;\n    const filtredCards = monsters.filter((card) =>\n      card.name.toLowerCase().includes(inputValue.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Cards</h1>\n        <SearchBox change={this.filterMonstersHandler} />\n        <List monsters={filtredCards} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}